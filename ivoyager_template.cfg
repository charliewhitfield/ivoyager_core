; File 'res://addons/ivoyager_core/ivoyager_template.cfg' is a template!
; The active config file is loaded from the project level file at path
; 'res://ivoyager.cfg'. This file is created automatically from the
; template if it does not exist already. These values modify default values
; set in global.gd, project_builder.gd, and ivoyager_base.cfg.
;
; Edit res://ivoyager_overrides.cfg to:
;   - modify IVGlobal settings (singletons/global.gd)
;   - remove, replace or add autoload singletons
;   - remove, replace, add or subclass ivoyager core classes
;
; Check dependencies before removing or replacing individual core classes. You
; can safely remove whole groups of classes by setting 'remove_...'=true
; under [class_presets].
;
; For changes to have effect, you can disable and re-enable the plugin.


[autoloads]

; Add, remove or replace autoloads specified in ivoyager_base.cfg. E.g.,
; replace 'IVUnits' path to use your own units and conversion dictionaries.

remove_autoloads=Array[String]([])
merge_overwrite_autoload_paths={}

[class_presets]

; These settings remove class_preset_groups defined in ivoyager_base.cfg.
; Listed objects won't be instantiated by project_builder.gd. This is safer
; than removing individual classes via singleton IVProjectBuilder dictionaries
; (to do that you need to investigate dependencies).

remove_save_load_system=false
remove_camera_system=false


; *****************************************************************************
;
; All sections below modify values set in 'IVGlobal' and 'IVProjectBuilder'
; singletons (see files in 'addons/ivoyager_core/singletons' directory). As an
; alternative, you can modify the singleton values directly using an
; initiallizer GDScript. The latter approach may be less error-prone and is
; necessary for adding classes by name rather than path. Buy it's your choice.

[global_overrides]

[global_array_removes]

; name_of_array=[remove_value1, remove_value2, ...]

[global_array_appends]

; name_of_array=[append_value1, append_value2, ...]

[global_dictionary_removes]

; name_of_dictionary=[remove_key1, remove_key2, ...]

[global_dictionary_overwrite_merges]

; name_of_dictionary={key1:value1,...} # will be merged w/ overwrite=true

[project_builder_overrides]

[project_builder_dictionary_removes]

; name_of_dictionary=[remove_key1, remove_key2, ...]

[project_builder_dictionary_overwrite_merges]

; name_of_dictionary={key1:value1,...} # will be merged w/ overwrite=true





